syntax = "proto3";
package Raft_server.RPC.Raft_service;

import "raft_entry.proto";

// Main raft servers service
service Raft_service {
    rpc append_entry (append_entry_msg) returns (append_entry_response) {}
    rpc request_vote (request_vote_msg) returns (request_vote_response) {}
}

// Invoked by leader to replicate log entries
// Also used as heartbeat
message append_entry_msg {
    uint64 term = 1;                 // leader's term
    uint64 leader_id = 2;            // so follower can redirect clients
    uint64 prev_log_index = 3;       // index of log entry preceding new ones
    uint64 prev_log_term = 4;        // term of prev_log_index
    Raft_server.RPC.Raft_entry.Entry
        entry = 5;                   // log entry to store (empty for heartbeat)
    uint64 leader_commit = 6;        // leader's commit index
}

message append_entry_response {
    uint64 term = 1;                 // current term for leader to update itself
    bool success = 2;                // true if follower contained entry
                                     // matching prev_log_index and prev_log_term
}

message request_vote_msg {
    uint64 term = 1;                 // candidate's term
    uint64 candidate_id = 2;         // candidate requesting vote
    uint64 last_log_entry = 3;       // index of candidate's log entry
    uint64 last_log_term = 4;        // term of candidate's log entry
}

message request_vote_response {
    uint64 term = 1;                 // current term for candidate to update itself
    bool vote_granted = 2;           // true if candidate recieved vote
}
