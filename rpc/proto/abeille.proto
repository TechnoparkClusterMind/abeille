syntax = "proto3";

// ----------------------------- Common ----------------------------- //

message Empty {}

// ----------------------------- User ----------------------------- //

message UserRequest {
  uint64 task_id = 1;
  repeated int32 data = 2;
}

message UserResponse {
  uint64 task_id = 1;
  int32 result = 2;
}

service UserService {
  rpc Ping(Empty) returns (Empty);
  rpc StreamData(stream UserRequest) returns (stream UserResponse) {}
}

// ----------------------------- Raft Entry ----------------------------- //

message Task {
  uint64 task_id = 1;
  uint64 assignee = 2;
  UserRequest user_request = 3;
  UserResponse user_response = 4;
}

enum TaskStatus {
  TO_DO = 0;
  IN_PROGRESS = 2;
  DONE = 1;
}

message AddRequest { TaskStatus to = 1; }

message MoveRequest {
  TaskStatus to = 1;
  TaskStatus from = 2;
}

message DeleteRequest { TaskStatus from = 1; }

// According to the CommandType
// needed request will be chosen
message Command {
  enum CommandType {
    ADD = 0;
    MOVE = 1;
    DELETE = 2;
  }

  CommandType command = 1;
  AddRequest add_request = 2;
  MoveRequest move_request = 3;
  DeleteRequest delete_request = 4;
}

// Log entry to store
message Entry {
  uint64 term = 1;
  Task task = 2;
  Command command = 3;
}

// ----------------------------- Raft Service ----------------------------- //

// Main raft servers service
service RaftService {
  rpc AppendEntry(AppendEntryRequest) returns (AppendEntryResponse) {}
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
}

// Invoked by leader to replicate log entries
// Also used as heartbeat
message AppendEntryRequest {
  uint64 term = 1;           // leader's term
  uint64 leader_id = 2;      // so follower can redirect clients
  uint64 prev_log_index = 3; // index of log entry preceding new ones
  uint64 prev_log_term = 4;  // term of prev_log_index
  Entry entry = 5;           // log entry to store (empty for heartbeat)
  uint64 leader_commit = 6;  // leader's commit index
}

message AppendEntryResponse {
  uint64 term = 1;  // current term for leader to update itself
  bool success = 2; // true if follower contained entry
                    // matching prev_log_index and prev_log_term
}

message RequestVoteRequest {
  uint64 term = 1;           // candidate's term
  uint64 candidate_id = 2;   // candidate requesting vote
  uint64 last_log_entry = 3; // index of candidate's log entry
  uint64 last_log_term = 4;  // term of candidate's log entry
}

message RequestVoteResponse {
  uint64 term = 1;       // current term for candidate to update itself
  bool vote_granted = 2; // true if candidate recieved vote
}
