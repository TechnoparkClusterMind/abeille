syntax = "proto3";

// ----------------------------- Common ----------------------------- //

message Empty {}

message TaskData { repeated int32 data = 1; }

message TaskResult { int32 result = 1; }

// ----------------------------- User Service ----------------------------- //

message TaskState {
  uint64 task_id = 1;
  TaskResult task_result = 2;
}

enum UserStatus {
  USER_STATUS_DOWN = 0;
  USER_STATUS_IDLE = 1;
  USER_STATUS_UPLOAD_DATA = 2;
}

message UserConnectRequest {
  UserStatus status = 1;
  TaskData task_data = 2;
}

enum UserCommand {
  USER_COMMAND_NONE = 0;
  USER_COMMAND_REDIRECT = 1;
  USER_COMMAND_ASSIGN = 2;
  USER_COMMAND_RESULT = 3;
}

message UserConnectResponse {
  UserCommand command = 1;
  uint64 leader_id = 2;
  uint64 task_id = 3;
  TaskResult task_result = 4;
}

service UserService {
  rpc Connect(stream UserConnectRequest) returns (stream UserConnectResponse) {}
}

// ----------------------------- Raft Entry ----------------------------- //

message Task {
  uint64 id = 1;
  uint64 client_id = 2;
  uint64 worker_id = 3;
  TaskData task_data = 4;
  TaskResult task_result = 5;
}

enum TaskStatus {
  TASK_STATUS_ASSIGNED = 0;
  TASK_STATUS_COMPLETED = 1;
}

message AddRequest { TaskStatus to = 1; }

message MoveRequest {
  TaskStatus to = 1;
  TaskStatus from = 2;
}

enum RaftCommand {
  RAFT_COMMAND_ADD = 0;
  RAFT_COMMAND_MOVE = 1;
}

// Log entry to store
message Entry {
  RaftCommand command = 1;
  uint64 term = 2;
  Task task = 3;
  AddRequest add_request = 4;
  MoveRequest move_request = 5;
}

// ----------------------------- Raft Service ----------------------------- //

// Main raft servers service
service RaftService {
  rpc AppendEntry(AppendEntryRequest) returns (AppendEntryResponse) {}
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
}

// Invoked by leader to replicate log entries
// Also used as heartbeat
message AppendEntryRequest {
  uint64 term = 1;           // leader's term
  uint64 leader_id = 2;      // so follower can redirect clients
  uint64 prev_log_index = 3; // index of log entry preceding new ones
  uint64 prev_log_term = 4;  // term of prev_log_index
  Entry entry = 5;           // log entry to store (empty for heartbeat)
  uint64 leader_commit = 6;  // leader's commit index
}

message AppendEntryResponse {
  uint64 term = 1;  // current term for leader to update itself
  bool success = 2; // true if follower contained entry
                    // matching prev_log_index and prev_log_term
}

message RequestVoteRequest {
  uint64 term = 1;           // candidate's term
  uint64 candidate_id = 2;   // candidate requesting vote
  uint64 last_log_entry = 3; // index of candidate's log entry
  uint64 last_log_term = 4;  // term of candidate's log entry
}

message RequestVoteResponse {
  uint64 term = 1;       // current term for candidate to update itself
  bool vote_granted = 2; // true if candidate recieved vote
}

// ----------------------------- Worker Service ----------------------------- //

enum WorkerStatus {
  WORKER_STATUS_DOWN = 0;
  WORKER_STATUS_IDLE = 1;
  WORKER_STATUS_BUSY = 2;
  WORKER_STATUS_COMPLETED = 3;
}

message WorkerConnectRequest {
  WorkerStatus status = 1;
  uint64 task_id = 2;
  TaskResult task_result = 3;
}

enum WorkerCommand {
  WORKER_COMMAND_NONE = 0;
  WORKER_COMMAND_ASSIGN = 1;
  WORKER_COMMAND_PROCESS = 2;
  WORKER_COMMAND_REDIRECT = 3;
}

message WorkerConnectResponse {  
  WorkerCommand command = 1;
  uint64 task_id = 2;
  uint64 leader_id = 3;
  TaskData task_data = 4;
  TaskResult task_result = 5;
}

service WorkerService {
  rpc Connect(stream WorkerConnectRequest) returns (stream WorkerConnectResponse) {}
}

// ----------------------------- Raft Config ----------------------------- //

message RaftConfig {
  string user_address = 1;
  string raft_address = 2;
  string worker_address = 3;
  repeated string peers = 4;
  repeated string workers = 5;
}

