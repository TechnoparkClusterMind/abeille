// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: abeille.proto

#include "abeille.pb.h"
#include "abeille.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* RaftService_method_names[] = {
  "/RaftService/AppendEntry",
  "/RaftService/RequestVote",
};

std::unique_ptr< RaftService::Stub> RaftService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftService::Stub> stub(new RaftService::Stub(channel, options));
  return stub;
}

RaftService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AppendEntry_(RaftService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(RaftService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftService::Stub::AppendEntry(::grpc::ClientContext* context, const ::AppendEntryRequest& request, ::AppendEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AppendEntryRequest, ::AppendEntryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendEntry_, context, request, response);
}

void RaftService::Stub::async::AppendEntry(::grpc::ClientContext* context, const ::AppendEntryRequest* request, ::AppendEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AppendEntryRequest, ::AppendEntryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntry_, context, request, response, std::move(f));
}

void RaftService::Stub::async::AppendEntry(::grpc::ClientContext* context, const ::AppendEntryRequest* request, ::AppendEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppendEntryResponse>* RaftService::Stub::PrepareAsyncAppendEntryRaw(::grpc::ClientContext* context, const ::AppendEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AppendEntryResponse, ::AppendEntryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AppendEntryResponse>* RaftService::Stub::AsyncAppendEntryRaw(::grpc::ClientContext* context, const ::AppendEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RaftService::Stub::RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::RequestVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RequestVoteRequest, ::RequestVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void RaftService::Stub::async::RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RequestVoteRequest, ::RequestVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void RaftService::Stub::async::RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>* RaftService::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RequestVoteResponse, ::RequestVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>* RaftService::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

RaftService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftService::Service, ::AppendEntryRequest, ::AppendEntryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AppendEntryRequest* req,
             ::AppendEntryResponse* resp) {
               return service->AppendEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftService::Service, ::RequestVoteRequest, ::RequestVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RequestVoteRequest* req,
             ::RequestVoteResponse* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
}

RaftService::Service::~Service() {
}

::grpc::Status RaftService::Service::AppendEntry(::grpc::ServerContext* context, const ::AppendEntryRequest* request, ::AppendEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftService::Service::RequestVote(::grpc::ServerContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UserService_method_names[] = {
  "/UserService/Connect",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connect_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::UserConnectRequest, ::UserConnectResponse>* UserService::Stub::ConnectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::UserConnectRequest, ::UserConnectResponse>::Create(channel_.get(), rpcmethod_Connect_, context);
}

void UserService::Stub::async::Connect(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::UserConnectRequest,::UserConnectResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::UserConnectRequest,::UserConnectResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::UserConnectRequest, ::UserConnectResponse>* UserService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::UserConnectRequest, ::UserConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::UserConnectRequest, ::UserConnectResponse>* UserService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::UserConnectRequest, ::UserConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, false, nullptr);
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< UserService::Service, ::UserConnectRequest, ::UserConnectResponse>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::UserConnectResponse,
             ::UserConnectRequest>* stream) {
               return service->Connect(ctx, stream);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::UserConnectResponse, ::UserConnectRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WorkerService_method_names[] = {
  "/WorkerService/Connect",
};

std::unique_ptr< WorkerService::Stub> WorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorkerService::Stub> stub(new WorkerService::Stub(channel, options));
  return stub;
}

WorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connect_(WorkerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::WorkerConnectRequest, ::WorkerConnectResponse>* WorkerService::Stub::ConnectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::WorkerConnectRequest, ::WorkerConnectResponse>::Create(channel_.get(), rpcmethod_Connect_, context);
}

void WorkerService::Stub::async::Connect(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::WorkerConnectRequest,::WorkerConnectResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::WorkerConnectRequest,::WorkerConnectResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::WorkerConnectRequest, ::WorkerConnectResponse>* WorkerService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::WorkerConnectRequest, ::WorkerConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::WorkerConnectRequest, ::WorkerConnectResponse>* WorkerService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::WorkerConnectRequest, ::WorkerConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, false, nullptr);
}

WorkerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< WorkerService::Service, ::WorkerConnectRequest, ::WorkerConnectResponse>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::WorkerConnectResponse,
             ::WorkerConnectRequest>* stream) {
               return service->Connect(ctx, stream);
             }, this)));
}

WorkerService::Service::~Service() {
}

::grpc::Status WorkerService::Service::Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::WorkerConnectResponse, ::WorkerConnectRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


